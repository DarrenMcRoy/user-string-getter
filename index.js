// Generated by CoffeeScript 1.8.0
(function() {
  var UserGetter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = UserGetter = (function() {
    UserGetter.prototype.$ = require('jqueryify');

    UserGetter.prototype.ANONYMOUS = "(anonymous)";

    UserGetter.prototype.currentUserID = ANONYMOUS;

    UserGetter.prototype.zooniverseCurrentUserChecker = null;

    UserGetter.returnAnonymous = function() {
      return ANONYMOUS;
    };

    function UserGetter(zooniverseCurrentUserCheckerFunction) {
      var zooniverseCurrentUserChecker;
      this.zooniverseCurrentUserCheckerFunction = zooniverseCurrentUserCheckerFunction;
      this.getUserIDorIPAddress = __bind(this.getUserIDorIPAddress, this);
      this.checkZooniverseCurrentUser = __bind(this.checkZooniverseCurrentUser, this);
      if (zooniverseCurrentUserCheckerFunction instanceof Function) {
        zooniverseCurrentUserChecker = zooniverseCurrentUserCheckerFunction;
      } else {
        zooniverseCurrentUserChecker = this.returnAnonymous;
      }
    }

    UserGetter.prototype.checkZooniverseCurrentUser = function() {
      var currentUserID;
      if (zooniverseCurrentUserChecker && zooniverseCurrentUserChecker instanceof Function && zooniverseCurrentUserChecker() !== null) {
        currentUserID = zooniverseCurrentUserChecker();
      } else {
        currentUserID = ANONYMOUS;
      }
      return currentUserID;
    };

    UserGetter.prototype.getClientOrigin = function() {
      var eventualIP;
      eventualIP = new $.Deferred;
      $.get('https://api.ipify.org').then((function(_this) {
        return function(ip) {
          console.log('returned IP was ' + ip);
          return eventualIP.resolve({
            ip: ip,
            address: ip
          });
        };
      })(this)).fail((function(_this) {
        return function() {
          return eventualIP.resolve({
            ip: '?.?.?.?',
            address: ANONYMOUS
          });
        };
      })(this));
      return eventualIP.promise();
    };

    UserGetter.prototype.getNiceOriginString = function(data) {
      if ((data.ip != null) && (data.address != null)) {
        if (data.ip === '?.?.?.?') {
          return ANONYMOUS;
        } else if (data.ip === data.address) {
          return "(" + data.ip + ")";
        } else {
          return "(" + data.address + " [" + data.ip + "])";
        }
      } else {
        return ANONYMOUS;
      }
    };

    UserGetter.prototype.getUserIDorIPAddress = function() {
      var checkUserNow, eventualUserID;
      eventualUserID = new $.Deferred;
      if (zooniverseCurrentUserChecker === !null) {
        checkUserNow = checkZooniverseCurrentUser();
        if (checkUserNow && currentUserID !== checkUserNow) {
          eventualUserID.resolve(currentUserID);
        } else if ((typeof currentUserID !== "undefined" && currentUserID !== null) && currentUserID !== ANONYMOUS) {
          eventualUserID.resolve(currentUserID);
        } else {
          getClientOrigin().then((function(_this) {
            return function(data) {
              var currentUserID;
              if (data != null) {
                return currentUserID = getNiceOriginString(data);
              }
            };
          })(this)).always((function(_this) {
            return function() {
              return eventualUserID.resolve(currentUserID);
            };
          })(this));
        }
      } else {
        eventualUserID.resolve(ANONYMOUS);
      }
      return eventualUserID.promise();
    };

    return UserGetter;

  })();

}).call(this);
