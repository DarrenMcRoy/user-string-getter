// Generated by CoffeeScript 1.8.0
(function() {
  var checkZooniverseCurrentUser, currentUserID, getClientOrigin, getNiceOriginString, getUserIDorIPAddress, setZooniverseCurrentUserChecker, zooniverseCurrentUserChecker;

  currentUserID = null;

  zooniverseCurrentUserChecker = null;

  setZooniverseCurrentUserChecker = (function(_this) {
    return function(zooniverseCurrentUserCheckerFunction) {
      if (zooniverseCurrentUserCheckerFunction instanceof Function) {
        zooniverseCurrentUserChecker = zooniverseCurrentUserCheckerFunction;
        return true;
      } else {
        return false;
      }
    };
  })(this);

  checkZooniverseCurrentUser = (function(_this) {
    return function() {
      if (zooniverseCurrentUserChecker && zooniverseCurrentUserChecker instanceof Function) {
        return currentUserID = zooniverseCurrentUserChecker();
      } else {
        return null;
      }
    };
  })(this);

  getClientOrigin = function() {
    var eventualIP;
    eventualIP = new $.Deferred;
    $.get('https://api.ipify.org').then((function(_this) {
      return function(ip) {
        return eventualIP.resolve({
          ip: ip,
          address: ip
        });
      };
    })(this)).fail((function(_this) {
      return function() {
        return eventualIP.resolve({
          ip: '?.?.?.?',
          address: '(anonymous)'
        });
      };
    })(this));
    return eventualIP.promise();
  };

  getNiceOriginString = function(data) {
    if ((data.ip != null) && (data.address != null)) {
      if (data.ip === '?.?.?.?') {
        return "(anonymous)";
      } else if (data.ip === data.address) {
        return "(" + data.ip + ")";
      } else {
        return "(" + data.address + " [" + data.ip + "])";
      }
    } else {
      return "(anonymous)";
    }
  };

  getUserIDorIPAddress = (function(_this) {
    return function() {
      var checkUserNow, eventualUserID;
      eventualUserID = new $.Deferred;
      if (zooniverseCurrentUserChecker === !null) {
        checkUserNow = zooniverseCurrentUserChecker();
        if (checkUserNow && currentUserID !== checkUserNow) {
          checkZooniverseCurrentUser();
          eventualUserID.resolve(currentUserID);
        } else if (currentUserID != null) {
          eventualUserID.resolve(currentUserID);
        } else if (checkZooniverseCurrentUser() != null) {
          eventualUserID.resolve(currentUserID);
        } else {
          getClientOrigin().then(function(data) {
            if (data != null) {
              return currentUserID = getNiceOriginString(data);
            }
          }).always(function() {
            return eventualUserID.resolve(currentUserID);
          });
        }
      } else {
        eventualUserID.resolve(null);
      }
      return eventualUserID.promise();
    };
  })(this);

  exports.getClientOrigin = getClientOrigin;

  exports.getNiceOriginString = getNiceOriginString;

  exports.getUserIDorIPAddress = getUserIDorIPAddress;

  exports.setZooniverseCurrentUserChecker = setZooniverseCurrentUserChecker;

  exports.checkZooniverseCurrentUser = checkZooniverseCurrentUser;

  exports.currentUserID = currentUserID;

}).call(this);
